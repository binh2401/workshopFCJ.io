[
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/1-introduce/",
	"title": "Building an Online Bookstore System Deployed on AWS",
	"tags": [],
	"description": "",
	"content": "In the context of a strong digital transformation, consumer behavior is shifting toward prioritizing online shopping to save time and enhance user experience. Building an online bookstore system not only meets the demand for quick and convenient book searching and purchasing but also contributes to market expansion for publishers.\nThe project \u0026ldquo;Building an Online Bookstore Website\u0026rdquo; is implemented with the goal of creating a specialized e-commerce platform for books, providing features from book browsing, searching, and ordering to product and user management.\nIn particular, the project integrates modern technologies such as:\nASP.NET MVC as the development framework for both backend and frontend, Amazon Web Services (AWS) to deploy the system on cloud infrastructure, Artificial Intelligence (AI) to suggest books tailored to user behavior through Graph Neural Networks (GNN) and Amazon Neptune ML. The system goes beyond a basic web application by aiming for scalable flexibility, high security, and efficient performance on the cloud platform. This lays the foundation for real-world deployment or future commercialization.\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create VPC and Configure Settings",
	"tags": [],
	"description": "",
	"content": "Create VPC Go to the VPC Management Console Click Your VPCs. Click Create VPC. On the Create VPC page: In the Name tag field, enter Lab VPC. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC. ‚ÑπÔ∏è Information By default, non-default subnets have the Auto-assign public IPv4 attribute set to false. Default subnets have this attribute set to true. Non-default subnets created via the EC2 Launch Wizard will have it set to true by default. üõ†Ô∏è Steps to Change the Configuration 1. Access the Amazon VPC Console üîó Open Amazon VPC Console\n2. Select the subnet you want to configure In the left navigation pane ‚Üí Subnets.\nSelect the subnet you want to configure. 3. Edit the subnet Click Actions ‚Üí Edit subnet settings.\nEnable or disable the Enable auto-assign public IPv4 address option as needed.\nClick Save to apply changes.\n‚ö†Ô∏è Note: This change only applies to new EC2 instances created in the subnet after the configuration. Existing running instances will not be affected.\n‚úÖ Tips Ensure your subnet is in a VPC with an Internet Gateway if you need public internet access. Review the security group and route table to ensure proper connectivity. "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.1-createec2/",
	"title": "Prepare VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a VPC with 2 subnets: one public and one private.\nThen, we will create 1 Linux EC2 Instance in the public subnet and 1 Windows EC2 Instance in the private subnet.\nThe overall architecture after completing this step will look like this:\nTo learn how to create EC2 instances and a VPC with public/private subnets, you can refer to these lab guides:\nIntroduction to Amazon EC2 Working with Amazon VPC Contents Create VPC Create Public subnet Create Private subnet Create Security Group Create Linux public server Create Windows private server "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Create Public Subnet",
	"tags": [],
	"description": "",
	"content": "‚ÑπÔ∏è What is a DB Subnet Group? A DB Subnet Group is a collection of subnets within a VPC designated for Amazon RDS databases.\nCreating a DB Subnet Group allows RDS to deploy database instances across multiple Availability Zones (AZs) to ensure:\nHigh availability Fault tolerance üõ†Ô∏è Steps to Create a DB Subnet Group Step 1: Access Amazon RDS Log in to the AWS Management Console. In the service menu, search for and select Amazon RDS.\nStep 2: Open the Subnet Groups interface In the left navigation pane ‚Üí select Subnet groups.\nClick the Create DB Subnet Group button.\nStep 3: Enter basic information Name: A descriptive name for the DB Subnet Group. Description: A detailed description. VPC: Select the VPC where you will deploy RDS. Example: Name: book-store-subnet-group Description: book-store-subnet-group VPC: vpc-0a1b2c3d Once done, click Create:\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "\rYou need to prepare certain AWS resources and programming technologies in advance to ensure a smooth development and deployment process for the system.\nüíª Technologies Used Technology / Service Role AWS EC2 Server to deploy the web application AWS RDS Cloud-based database service (SQL Server) AWS S3 Stores book cover images and attachments AWS SNS Sends email notifications when order status changes AWS IAM Manages access permissions for AWS resources AWS CloudWatch Logs system activities, monitors server status and performance AWS WAF Protects the website from external threats Graph Neural Networks + Neptune ML Recommends books based on user-book-author-category interaction network üîß AWS Resources to Prepare Before integrating system functionalities, you should prepare the following:\n1 EC2 instance (Linux or Windows) in a public subnet to deploy the web application. 1 RDS instance (SQL Server) to store data such as products, users, and orders. 1 IAM Role with permissions to access SNS, S3, CloudWatch, and other services. 1 SNS Topic with subscribed email addresses for receiving notifications. 1 S3 bucket to store book cover images. AWS WAF configuration to protect the website against attacks like SQLi, XSS, and DDoS. AWS CloudWatch configuration to monitor system logs. Neptune ML account setup to train the AI-based book recommendation model (using GNN). üîó Reference Documents Introduction to Amazon EC2 Working with Amazon VPC "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/3-accessibilitytoinstances/",
	"title": "Create a Connection to an EC2 Server",
	"tags": [],
	"description": "",
	"content": "Guide to Creating an Amazon EC2 Instance ‚ÑπÔ∏è Information: Amazon Elastic Compute Cloud (EC2) provides scalable computing capacity in the AWS cloud. Using EC2 allows you to deploy virtual servers without investing in physical hardware, helping you develop and deploy applications faster.\nüìå Steps to Create an EC2 Instance 1. Access AWS Management Console Open your browser and go to the Amazon EC2 console:\nüëâ https://console.aws.amazon.com/ec2/ 2. Launch an EC2 Instance On the EC2 console Dashboard, in the Launch instance box, select Launch instance. 1. Launch an Instance üîñ Name and Tags Instance name: book-store-server 2. Application and OS Images (Amazon Machine Image) üîπ Mode: Quick Start Operating System: Amazon Linux Version: Amazon Linux 2023 AMI Details: Full name: Amazon Linux 2023 AMI 2023.2.20240219.0 x86_64 HVM kernel-6.1 Image ID: ami-0c55b159cbfafe1f0 Architecture: x86_64 Virtualization type: HVM Root device type: EBS Platform: Linux Free tier eligible ‚úÖ 3. Instance Type Instance type: t2.micro 1 vCPU, 1 GiB RAM Free tier eligible ‚úÖ 4. Key Pair (Login) Selected key pair: book-store If you don‚Äôt have one yet, click Create key pair. 5. Network Settings VPC: vpc-xxx (back-store-cloud-vpc) Subnet: subnet-xxx (back-store-cloud-public-sub-eastasia-b) Auto-assign public IP: Enabled Firewall (security group rules): Mode: Select existing security group Security group: book-store-cloud-sg (ID: sg-034e625ff1fbdd04c) Open ports: SSH (TCP port 22) HTTP (TCP port 80) HTTPS (TCP port 443) 6. Configure Storage Default volume: Size: 10 GiB Type: gp2 (General Purpose SSD) Free tier eligible ‚úÖ Encrypted: ‚ùå (Not encrypted) 7. Summary Name: book-store-server AMI: Amazon Linux 2023 Instance type: t2.micro Key pair: book-store Security group: book-store-cloud-sg Storage: 10 GiB gp2 Free tier eligible: ‚úÖ ‚úÖ After Completing: Click the Launch instance button. Wait for the instance status to change from pending to running. Connect to the instance via SSH using its public IP or DNS through MobaXterm or a terminal. Connect to an EC2 Instance via SSH using MobaXterm ‚ÑπÔ∏è Information:\nMobaXterm is an all-in-one application for Windows that provides various networking tools in a single interface, including:\nSSH client SFTP X11 server And more üß∞ Step 1: Download and Install MobaXterm Download MobaXterm from the official site: üëâ MobaXterm Website Install the application following the instructions. üîå Step 2: Create a New SSH Session Launch MobaXterm. Click the Session icon in the top left corner. ‚öôÔ∏è Step 3: Configure SSH Connection In the configuration window:\nRemote Host: Enter the public IP or public DNS of your EC2 instance. Port: 22 (default SSH port) User: ec2-user (for Amazon Linux) ‚ûï Advanced SSH settings: Go to this tab to specify the path to the private key file (.pem) used for SSH connection. üîí Security Note:\nEnsure the .pem file has restricted permissions (readable only by the current user). On Linux/Mac, run: chmod 400 file.pem üñ•Ô∏è Step 4: Connect to the EC2 Instance Click OK to save and start the SSH session. If this is your first time connecting: A warning about an unknown host key will appear. Click Yes to continue. ‚úÖ Verify Successful Connection Once connected, you will see the terminal of the EC2 instance. You can start running commands such as: sudo yum update, top, htop, \u0026hellip; üí° Tip:\nMobaXterm automatically saves recent sessions. This allows you to easily reconnect without reconfiguring. üéâ Done! You have successfully connected to your EC2 instance via SSH.\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.1-createec2/2.1.3-createprivatesubnet/",
	"title": "Create EC2 Security Group",
	"tags": [],
	"description": "",
	"content": "‚ÑπÔ∏è What is a Security Group? A Security Group acts as a virtual firewall, controlling inbound and outbound traffic to AWS resources such as EC2.\nEach Security Group contains a set of inbound rules and outbound rules. It is applied to each EC2 instance or related services. üõ†Ô∏è Steps to Create a Security Group for EC2 Step 1: Access AWS EC2 Console Log in to the AWS Management Console. In the service menu, select EC2 under Compute.\nStep 2: Open Security Groups In the left navigation pane, under Network \u0026amp; Security ‚Üí select Security Groups.\nClick Create Security Group. Step 3: Enter basic information Security group name: A descriptive name for the Security Group. Description: Details about the purpose of the Security Group. VPC: Select the VPC where you want to apply it. Example: Name: web-server-sg Description: Security group for application web server VPC: vpc-0a1b2c3d üì• Step 4: Configure Inbound Rules Add rules to allow incoming traffic to your EC2 instance:\nTraffic Type Port Description HTTP 80 Unsecured web access HTTPS 443 Secure web access Custom TCP 5000 Allow app running on port 5000 SSH 22 SSH access for server administration üîí Security Note:\nIn a production environment, only allow SSH from trusted IP addresses, e.g., 203.0.113.0/24.\nAvoid using 0.0.0.0/0 unless you are in a test environment or have other security layers in place.\nüì§ Step 5: (Optional) Configure Outbound Rules Default: Allow all outbound traffic. You can restrict outbound traffic if tighter control is required in special environments. Step 6: After completing the configuration, click Create security group. üí° Pro Tip:\nYou can edit Security Group rules at any time, and changes will be applied immediately to all resources associated with the Security Group.\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.2-createiamrole/",
	"title": "Create SNS and IAM for Sending Email",
	"tags": [],
	"description": "",
	"content": "üì¨ Objective In this step, we will:\nCreate an SNS Topic to send an email when an order is placed successfully. Create an IAM Policy that allows the application to send notifications via SNS. Assign that permission to an EC2 Instance or backend service. üõ†Ô∏è Create an SNS Topic Go to the Amazon SNS service. Select Topics from the left menu, then click Create topic.\nChoose Standard as the topic type.\nEnter a name for the topic, for example: book-email.\nKeep the default settings and click Create topic.\nüì• Subscribe an Email to Receive Notifications After creating the topic, select it from the list. In the Subscriptions tab, click Create subscription. Choose:\nProtocol: Email Endpoint: enter your email address to receive notifications (e.g., user@example.com)\nClick Create subscription.\nüìß A confirmation email will be sent to the address you entered. You must click the confirmation link in that email to start receiving notifications.\nüîê Create an IAM User to Send SNS Messages In this section, you will create an IAM User specifically for sending emails through Amazon SNS. This user will have the sns:Publish permission to the topic you created.\n1. Open the IAM Console Go to the IAM Management Console.\n2. Create an IAM User Select Users ‚Üí click Create user 3. Enter User Information Enter a user name, for example: book-store-sns Check Programmatic access ‚Üí Click Next\n4. Attach SNS Permissions Choose Attach policies directly Search for AmazonSNSFullAccess and check it (or attach a custom policy if you already created one) Click Next\n5. Review and Create IAM User Click Create user\nCreate Access Key:\nClick Create access key (top right, under Access key) Follow the instructions to create an Access key ID and Secret access key pair ‚úÖ Note: You can only view the Secret access key once at creation time. Save it securely for configuring in your application.\n6. Use the Access Key in Your Application You can use this Access Key to send emails via SNS using the appropriate SDK:\nFor ASP.NET MVC (AWS SDK for .NET) Or Python, Node.js, Java, etc. 7. Configure AWS in appsettings.json Add SNS configuration details to the appsettings.json file as follows:\n{ \u0026#34;AWS\u0026#34;: { \u0026#34;AccessKey\u0026#34;: \u0026#34;Your AccessKey\u0026#34;, \u0026#34;SecretKey\u0026#34;: \u0026#34;Your SecretKey\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;Your configured Region\u0026#34;, \u0026#34;SnsTopicArn\u0026#34;: \u0026#34;Your SnsTopicArn\u0026#34; } } üîê Security Warning: Do not commit your AccessKey and SecretKey to GitHub. Instead, store them in environment variables or a .env configuration file.\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/4-s3log/",
	"title": "Create RDS Database and Deploy Website",
	"tags": [],
	"description": "",
	"content": "1. Install Git on Amazon EC2 (Amazon Linux 2023) Step 1: Update the system sudo dnf update -y sudo dnf search git sudo dnf install git -y git --version Step 2: Install ASP.NET on Amazon EC2 Linux 2023 and clone files from Git # Install .NET SDK \u0026amp; Runtime sudo dnf install -y dotnet-sdk-8.0 sudo dnf install -y aspnetcore-runtime-8.0 # Check version dotnet --version After verifying the version, clone the repository: git clone https://github.com/binh2401/FCJ.git Guide to Creating an RDS SQL Server on AWS Amazon RDS supports deploying Microsoft SQL Server as a managed service.\nThis guide will help you set up a SQL Server instance quickly and securely.\nüîß Steps Step 1: Open Amazon RDS Console Go to: https://console.aws.amazon.com/rds/\nIn the left navigation panel ‚Üí choose Databases\nClick Create database\nStep 2: Choose creation method Select Standard create (to fully customize the setup) Engine: choose Microsoft SQL Server Step 3: Choose version and edition Edition: SQL Server Web Edition SQL Server Express Edition SQL Server Standard Edition SQL Server Enterprise Edition (for advanced features) "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/2-prerequiste/2.1-createec2/2.1.4-createsecgroup/",
	"title": "Create Security Group for Amazon RDS",
	"tags": [],
	"description": "",
	"content": "Create Security Group for Amazon RDS ‚ÑπÔ∏è Information:\nA Security Group for Amazon RDS acts as a virtual firewall to control inbound and outbound network traffic to your database. Configuring the Security Group correctly is a crucial step to protect your data in AWS.\nüõ†Ô∏è Steps to Create a Security Group for RDS 1. Log in to AWS Management Console. 2. Access the VPC service Go to the Services menu.\nSelect VPC under Networking \u0026amp; Content Delivery. 3. Open the Security Groups list In the left navigation pane, under Security, choose Security Groups. 4. Click the Create security group button to start the process. üìù Configure Basic Details Security group name: Enter a descriptive name for the Security Group. Description: Add a detailed description of the Security Group‚Äôs purpose. VPC: Select the VPC where you will deploy your RDS database. üîê Configure Inbound Rules Select MSSQL from the Type list. Port 1433 will be auto-filled. Source: Select Anywhere-IPv4. üîí Security Note:\nOnly allow connections from specific sources instead of opening the database port to all IP addresses (0.0.0.0/0). This follows the principle of least privilege and improves security.\nüì§ (Optional) Configure Outbound Rules By default, all outbound traffic is allowed. You can restrict it if you need higher security. ‚úÖ Create Security Group Once you have completed the configuration, click Create security group. The new Security Group is now created and ready to be assigned to your RDS DB instance. ‚ö†Ô∏è Warning:\nDo not use the same Security Group for both EC2 and RDS.\nKeeping Security Groups separate allows more precise access control and follows security best practices.\nüí° Pro Tip You can edit Security Group rules at any time, and changes will apply immediately to all resources associated with that Security Group.\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/5-portfwd/",
	"title": "Overview and Configuration of AWS WAF and CloudFront",
	"tags": [],
	"description": "",
	"content": "üîê I. AWS WAF Overview AWS WAF (Web Application Firewall) is a web application firewall service that helps protect websites or APIs from common threats such as:\nSQL Injection Cross-Site Scripting (XSS) DDoS attacks (when combined with AWS Shield) Unusual requests (based on IP, country, header, etc.) üõ†Ô∏è II. Steps to Configure AWS WAF 1. Create an Application Load Balancer (ALB) Go to EC2 Console ‚Üí Load Balancers ‚Üí Create Load Balancer\nSelect type: Application Load Balancer Configuration: Set ALB name Select schema: Internet-facing (if the website is public) Select VPC, Subnet Configure security group to open ports 80/443\n2. Create a Target Group During ALB creation, select Create a new target group\nTarget type: Instance Select protocol: HTTP or HTTPS Add EC2 instances running your website to the target group\n3. Attach AWS WAF to the ALB Go to AWS WAF \u0026amp; Shield Select Web ACLs ‚Üí Create Web ACL In the Association step, choose the ALB you created 1. Create a Web ACL (Access Control List) Go to AWS Console ‚Üí Search for WAF \u0026amp; Shield\nSelect Web ACLs ‚Üí Create web ACL\nName it, select Region if using ALB, or CloudFront if using CDN.\n2. Choose the Resource to Protect Attach the Web ACL to one of the following: Application Load Balancer (ALB) Amazon API Gateway Amazon CloudFront (recommended for global websites) 3. Add Rules to the Web ACL You can choose:\n‚úÖ AWS Managed Rule Groups: 4. Configure Action for Each Rule Allow: Permit Block: Deny Count: Log only (good for testing before enforcement) 5. Associate Web ACL with the Resource Once created, attach the Web ACL to the resource you want to protect:\nClient ‚Üí CloudFront (with AWS WAF) ‚Üí ALB ‚Üí EC2/Laragon (.NET App)\nIntegrating AWS CloudWatch into an ASP.NET MVC Application ‚úÖ Objective Log errors and system logs from ASP.NET MVC to AWS CloudWatch Logs Automatically create Log Group/Stream if not already existing No need to install the CloudWatch Agent üß∞ Requirements ASP.NET MVC application (Core or .NET Framework) AWS account and IAM user with permissions to write to CloudWatch Logs üîß Step 1: Install AWS Logger Package Open terminal or Package Manager Console and run:\ndotnet add package AWS.Logger.AspNetCore If you are using older .NET Framework MVC, use:\nAWS.Logger.Log4Net or AWS.Logger.NLog depending on your logging framework.\n‚öôÔ∏è Step 2: Configure appsettings.json { \u0026#34;AWS\u0026#34;: { \u0026#34;Region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34;, \u0026#34;LogGroup\u0026#34;: \u0026#34;MvcAppLogGroup\u0026#34; }, \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft\u0026#34;: \u0026#34;Warning\u0026#34; } } } üß¨ Step 3: Configure Logger in Code ‚úÖ For ASP.NET Core MVC (.NET 6 and above): Edit Program.cs:\nusing AWS.Logger.AspNetCore; var builder = WebApplication.CreateBuilder(args); builder.Logging.AddAWSProvider(builder.Configuration.GetAWSLoggingConfigSection()); builder.Services.AddControllersWithViews(); var app = builder.Build(); app.UseRouting(); app.UseAuthorization(); app.MapDefaultControllerRoute(); app.Run(); üîê Step 4: Configure AWS Access Permissions üëâ If running on EC2: Assign an IAM Role to the EC2 instance with permissions:\n{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } üëâ If running locally (dev): Create ~/.aws/credentials on Linux/Mac or C:\\Users\\\u0026lt;username\u0026gt;\\.aws\\credentials on Windows:\n[default] aws_access_key_id = YOUR_ACCESS_KEY aws_secret_access_key = YOUR_SECRET_KEY üß™ Step 5: Add Logging in Controller private readonly ILogger\u0026lt;HomeController\u0026gt; _logger; public HomeController(ILogger\u0026lt;HomeController\u0026gt; logger) { _logger = logger; } public IActionResult Index() { _logger.LogInformation(\u0026#34;Homepage accessed at \u0026#34; + DateTime.Now); return View(); } üìä Step 6: Check Logs in AWS Go to AWS Console \u0026gt; CloudWatch \u0026gt; Log groups Select MvcAppLogGroup Choose the log stream to view details üß© Additional Notes You can use AWS X-Ray to trace performance if the application is complex. You can also integrate LogLevel, EventID, and Exception for more detailed logs. Good luck with your implementation!\n"
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/6-cleanu/",
	"title": "Graph Neural Networks with Neptune ML (in progress)",
	"tags": [],
	"description": "",
	"content": "üéØ Objective Guide on exporting data from SQL Server to CSV files and manually uploading them to Amazon S3 for use in Amazon Neptune.\nüß± Step 1: Install required libraries Install via pip: pip install pandas pyodbc boto3 üß© Step 2: Connect to SQL Server and export data to the ./export folder üìÅ Directory structure: project/\r‚îÇ\r‚îú‚îÄ‚îÄ export/ # Contains CSV files after export\r‚îú‚îÄ‚îÄ data.py # Python script for export üî¢ Code data.py: import os import pandas as pd from sqlalchemy import create_engine # Connection string server = \u0026#39;(localdb)\\\\MSSQLLocalDB\u0026#39; database = \u0026#39;boookstore\u0026#39; conn_str = f\u0026#39;mssql+pyodbc://@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server\u0026#39; # Create connection engine engine = create_engine(conn_str) # List of tables to export tables = [\u0026#39;dbo.Categories\u0026#39;, \u0026#39;dbo.Products\u0026#39;, \u0026#39;dbo.Orders\u0026#39;] # Output folder for CSV files output_folder = \u0026#39;./export\u0026#39; os.makedirs(output_folder, exist_ok=True) # Export each table for table in tables: print(f\u0026#34;üìå Processing table: {table}\u0026#34;) df = pd.read_sql(f\u0026#34;SELECT * FROM {table}\u0026#34;, engine) table_name = table.split(\u0026#39;.\u0026#39;)[-1] df.to_csv(f\u0026#39;{output_folder}/{table_name}.csv\u0026#39;, index=False) print(f\u0026#34;‚úÖ Saved: {table_name}.csv\u0026#34;) ‚òÅÔ∏è Step 3: Manually upload to Amazon S3 Go to AWS S3 Console Create a bucket (if not already created) Open the bucket ‚Üí click Upload ‚Üí select the .csv files in the ./export folder After uploading, copy the S3 URI of each file (e.g., s3://your-bucket-name/Categories.csv) "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/7-clean/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "üß® Notes before deleting Always double-check if the resource is currently in use. Backup important data (if needed) before deleting. üßπ 1. Delete VPC manually Step 1: Open VPC Dashboard Go to: https://console.aws.amazon.com/vpc Navigate to Your VPCs Step 2: Delete resources inside the VPC: Subnets Route tables Internet gateways NAT gateways Security groups (custom ones) Step 3: Delete VPC Select the VPC ‚Üí Actions ‚Üí Delete VPC ‚ö†Ô∏è You cannot delete a VPC if it still contains resources.\nüíæ 2. Delete RDS Instance manually Step 1: Open RDS Dashboard Go to: https://console.aws.amazon.com/rds Step 2: Go to Databases Select the DB to delete ‚Üí Actions \u0026gt; Delete Step 3: Choose whether to keep the final snapshot Check Skip final snapshot if you do not need to keep it üîê 3. Delete Security Group Go to: EC2 Dashboard ‚Üí Security Groups Select the group ‚Üí Actions \u0026gt; Delete Security groups can only be deleted if they are not attached to any EC2 instance or resource.\nüìä 4. Delete Log Group in CloudWatch Go to: https://console.aws.amazon.com/cloudwatch Select Log groups ‚Üí check the log group ‚Üí Actions \u0026gt; Delete log group üî• 5. Delete WAF Web ACL Go to: https://console.aws.amazon.com/wafv2 Select the Web ACL Click Delete If attached to ALB or CloudFront, detach it first.\nüìÅ 6. Delete S3 Bucket Go to: https://s3.console.aws.amazon.com/s3 Click the bucket ‚Üí Empty to delete all files Then Delete bucket üß¨ 7. Delete Neptune Cluster Step 1: Open Neptune Dashboard Go to: https://console.aws.amazon.com/neptune Step 2: Delete all instances Select each DB instance in the cluster Click Actions \u0026gt; Delete Step 3: Delete the cluster Once all instances are removed, select the Cluster Click Delete cluster Choose whether to Skip final snapshot (only skip if data is no longer needed) ‚ö†Ô∏è You must remove associated parameter groups and subnet groups if you no longer need them.\n‚úÖ Summary Always confirm before deleting. Use tagging to quickly identify unused resources. Set up billing alerts to avoid costs from forgotten resources. "
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://binh2401.github.io/workshopFCJ.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]